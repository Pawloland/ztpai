<?php

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Language;
use App\Entity\Movie;
use App\Service\PosterSaver;
use DateTimeImmutable;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\Validator\Exception\ValidationFailedException;
use Symfony\Component\Validator\Validator\ValidatorInterface;

final class MovieStateProcessorPOST implements ProcessorInterface
{
    public function __construct(
        #[Autowire(service: 'api_platform.doctrine.orm.state.persist_processor')]
        private ProcessorInterface     $persistProcessor,
        private RequestStack           $requestStack,
        private ValidatorInterface     $validator,
        private EntityManagerInterface $em
    )
    {
    }


    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Movie
    {
        $request = $this->requestStack->getCurrentRequest();

        if (!$request) {
            throw new BadRequestHttpException("Request is missing");
        }

        if ($request->getMethod() !== Request::METHOD_POST) {
            throw new MethodNotAllowedHttpException(['POST'], 'Only POST method is allowed');
        }

        $title = $request->get('title');
        $originalTitle = $request->get('original_title');
        $durationRaw = $request->get('duration');
        $languageId = $request->get('id_language');
        if (!$title || !$originalTitle || !$durationRaw || !$languageId) {
            throw new BadRequestHttpException("Missing required fields");
        }

        $poster = $request->files->get('poster');

        if (!$poster) {
            throw new BadRequestHttpException('"poster" is required');
        }


        $duration = (new DateTimeImmutable($durationRaw))->setDate(1970, 1, 1);
        $language = $this->em->getRepository(Language::class)->find((int)$languageId);

        if (!$language) {
            throw new BadRequestHttpException("Invalid language ID");
        }

        // Create movie object
        $movie = new Movie();
        $movie->setTitle($title);
        $movie->setOriginalTitle($originalTitle);
        $movie->setDuration($duration);
        $movie->setLanguageViaIdLanguage($language);

        // Validate movie (without poster)
        $violations = $this->validator->validate($movie);
        if (count($violations) > 0) {
            throw new ValidationFailedException($movie, $violations);
        }

        // Persist and flush to generate ID
        $this->em->persist($movie); //open sql transaction and try to create movie entry based on object
        $this->em->flush(); // close sql transaction and save movie entry to database
        $this->em->refresh($movie); // get created movie entry from database (pulls autogenerated poster name - uuid)


        try {
            PosterSaver::save($poster->getPathname(), $movie->getPoster());
        } catch (FileException $e) {
            throw new BadRequestHttpException("Failed to save uploaded file.");
        }


        return $movie;
    }
}
