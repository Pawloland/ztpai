services:
  rabbitmq:
    image: rabbitmq:management
    env_file:
      - ./.env
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_NODE_PORT_EXTERNAL:-5672}:${RABBITMQ_NODE_PORT:-5672}" # RabbitMQ default port
      - "${RABBITMQ_MNGMNT_PORT_EXTERNAL:-15672}:15672" # RabbitMQ management plugin port
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-guest}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-guest}"
    healthcheck:
      test: >
        rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 12

  php_base:
    container_name: php_base
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    env_file:
      - ./.env
    volumes:
      - ./symfony:/app # Mount the symfony directory to /app inside the container
    working_dir: /app
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: bash -c "echo [INFO] This docker service does nothing. It should be extended and not run directly. If you see this message more than one time for the same service, then something is set up incorrectly. This message should be seen only when bare docker compose up is run."

  php:
    container_name: php
    extends: php_base
    volumes:
      - ./docker/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini:ro
      - ./docker/php/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini:ro
      # - ./docker/php/tmp:/tmp:rw
    ports:
      - "8000:8000"
    environment:
      - XDEBUG_MODE=debug # to connect to xdebug from phpstorm: File > Settings > PHP > Servers > + >
      # Name: whatever, Host: 127.0.0.1 (localhost can not work), Port: 8000, Debugger: Xdebug,
      # set absolute path on the server for Project_files/(path of the project here)/symfony to /app
      - FILESAVER_UID=1000 # docker host UID of the owner of the bind mounted directory in /app under the php container
      - FILESAVER_GID=1000 # likewise for GID
      - FILESAVER_USER=filesaver # username of the user that will be created inside the container with UID and GID specified above
      # Those two variables are used when saving files under /app directory, so that they are owned by the user on the host system
      # so both container and host can read/write to the files (UID and GID is changed only for the write operation,
      # because for read operations groups or other users permissions are enough most of the time)
    command: |
      bash -c '
        # Backup /etc files if not already backed up
        [ ! -f /etc/passwd.back ] && cp /etc/passwd /etc/passwd.back
        [ ! -f /etc/group.back ] && cp /etc/group /etc/group.back
        [ ! -f /etc/shadow.back ] && cp /etc/shadow /etc/shadow.back
    
        # Restore original system files
        cp /etc/passwd.back /etc/passwd
        cp /etc/group.back /etc/group
        cp /etc/shadow.back /etc/shadow
      
        addgroup -g "$$FILESAVER_GID" "$$FILESAVER_USER" && \
        adduser -D -h /dev/null -H -u "$$FILESAVER_UID" -G "$$FILESAVER_USER" -s /sbin/nologin "$$FILESAVER_USER" && \
        echo "www-data ALL=("$$FILESAVER_USER") NOPASSWD: /sbin/poster_saver" >  /etc/sudoers && \
        
        symfony server:stop ; \
    
        symfony server:start --no-interaction --allow-all-ip --no-tls
      '


  php-rabbitmq-consumer:
    extends: php_base
    container_name: php-rabbitmq-consumer
    command: php consumer.php



  postgres:
    container_name: postgres
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
      args:
        POSTGRES_DB: ${POSTGRES_DB} # Pass POSTGRES_DB as build argument
    ports:
      - "${PGPORT}:${PGPORT}"
    # environment:
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #   POSTGRES_DB: ${POSTGRES_DB}
    #   POSTGRES_USER: ${POSTGRES_USER}
    #   PGPORT: ${PGPORT}
    volumes:
      - "./docker/postgres/db_init_plus_example_data.sql:/docker-entrypoint-initdb.d/db_init_plus_example_data.sql:ro" # read only

  pgadmin:
    env_file:
      - ./.env
    image: dpage/pgadmin4:9.3
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - ./docker/pgadmin:/var/lib/pgadmin
    user: "0:0" # ugly workaround, but doesn't require configuration on the docker host side, so is the most portable solution OOTB, that woks with mounted folders, to make them also easily browsable for host (with root oc)

  node-base:
    container_name: node-base
    image: node:latest
    env_file:
      - ./.env
    volumes:
      - ./frontend/biletron-frontend:/biletron-frontend
    working_dir: /biletron-frontend
    command: bash -c "echo [INFO] This docker service does nothing. It should be extended and not run directly. If you see this message more than one time for the same service, then something is set up incorrectly. This message should be seen only when bare docker compose up is run."

  node-install:
    container_name: node-install
    extends: node-base
    command: npm install
    profiles: [ "install" ]

  node-dev:
    container_name: node-dev
    extends: node-base
    ports:
      - "5173:5173"
    command: npm run dev
    profiles: [ "run-dev" ]
